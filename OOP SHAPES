### proram.py ###

from Rectangle import Rectangle
from Triangle import Triangle

r1 = Rectangle('rec1', 5.8, 9.9)
print(r1)
r1.print_area()
t1 = Triangle('tr1', 4.6, 7.8, 8.1, 5.78)
print(t1)



### Shape ###

from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def __init__(self, name):
        self.name = name

    @abstractmethod
    def print_area(self):
        pass

    def __str__(self):
        return f'[Shape] name: {self.name}'
        
        

### Triangle ###

from Shape import Shape

class Triangle(Shape):
    def __init__(self, name, a, b, c, h_to_b):
        super().__init__(name)
        self.a = a
        self.b = b
        self.c = c
        self.h_to_b = h_to_b

    # override
    def get_area(self):
        return self.h_to_b * self.b / 2.0

    def print_area(self):
        print(f' area = {self.get_area()}')

    def __str__(self):
        return f'[Triangle] a: {self.a} b: {self.b} '+\
            f'c: {self.c} area-{self.get_area()} | ' + super().__str__()
            
            


### Rectangle ###


from Shape import Shape

class Rectangle(Shape):
    def __init__(self, name, width, height):
        super().__init__(name)
        self.width = width
        self.height = height

    def get_area(self):
        return self.width * self.height

    def print_area(self):
        print(f' area = {self.get_area()}')

    def __str__(self):
        return f'[Rectangle] width: {self.width} height: {self.height} '+\
            f'area-{self.get_area()} | ' + super().__str__()

